{"version":3,"file":"src_worker_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA0B;AACkC;AAC5B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6CAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8DAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;AC3FvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ4B;AACO;AACF;AACoB;AAChB;AACM;AACF;AACF;AACd;AACgB;AACR;AACU;AAC3B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAU;AACxC,6BAA6B,mDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAqB;AACtC;AACA;AACA,iBAAiB,uEAAuB;AACxC;AACA;AACA,iBAAiB,sEAAsB;AACvC;AACA;AACA,iBAAiB,oEAAoB;AACrC;AACA;AACA,iBAAiB,wEAAwB;AACzC;AACA;AACA,iBAAiB,mEAAmB;AACpC;AACA;AACA,iBAAiB,6EAA6B;AAC9C;AACA;AACA,iBAAiB,oEAAmB;AACpC;AACA;AACA,iBAAiB,yEAAwB;AACzC;AACA;AACA,iBAAiB,uEAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kEAAkB;AAC/D;AACA,aAAa;AACb;AACA,iCAAiC,+DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kEAAkB;AACnE;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAyB;AAC9C,UAAU;AACV,qBAAqB,kEAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oEAAoB;AAClE,wCAAwC,iEAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uEAAuB;AACxE;AACA,8CAA8C,oEAAoB;AAClE;AACA,yCAAyC,kEAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mEAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2EAAkC;AAC3D;AACA;AACA;AACA;AACA;AACA,sCAAsC,mFAA0C;AAChF;AACA;AACA;AACA;AACA,qCAAqC,8DAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kEAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0CAA0C,mEAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wEAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wFAA+C;AAC1F;AACA;AACA;AACA,qCAAqC,kEAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wEAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAyB;AAChD,uBAAuB,kEAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sEAA6B;AAC5D;AACA;AACA;AACA;AACA,uDAAuD,wEAAwB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,oEAAoB;AAC3F,8CAA8C,oEAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAA2B;AACtD,+BAA+B,iFAAwC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;AC7maAAa;AACbwDAAwD;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;ACxT1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACdaAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;;;;ACpSL;AAC4B;AACtB;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8DAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;AC3E4B;AAC8C;AACpG;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4EAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;ACvCe;AACxC;AACA,8BAA8B,oDAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;;ACZS;AACxC;AACA,6BAA6B,oDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;ACjBU;AACxC;AACA,uCAAuC,oDAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,wBAAwB,EAAC;;;;;;;;;;;;;;;ACZxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;ACPa;AACxC;AACA,+BAA+B,oDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;;ACVQ;AACxC;AACA,kCAAkC,oDAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB,EAAC;;;;;;;;;;;;;;;;ACfK;AACxC;AACA,iCAAiC,oDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;ACVM;AACxC;AACA,gCAAgC,oDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;ACVN;AAC3B;AACA;AACA;AACA,2BAA2B,+CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+CAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;AC5Cc;AACxC;AACA,iCAAiC,oDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;ACVM;AACxC;AACA,6BAA6B,oDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;ACVU;AACxC;AACA,kCAAkC,oDAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB;;;;;;;;;;;;;;;;;ACZF;AACM;AACkC;AACxE;AACA,sBAAsB,mDAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAsB;AAChD;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D,oCAAoC,gDAAO;AAC3C;AACA;AACA;AACA;AACA,0BAA0B,8DAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;AC1CS;AACM;AACA;AACF;AACpC;AACA,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gEAAuB;AACnE;AACA;AACA,qDAAqD,iEAAwB;AAC7E,2DAA2D,iEAAwB;AACnF,qEAAqE,8DAAqB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;ACrHtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;AChGmE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAgiEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;ACxImC;AAC1B;AAChC;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yCAAyC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gDAAO;AACvD;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;ACxC4C;AAClB;AACJ;AAC1C;AACA;AACA;AACA;AACA,yBAAyB,6EAAoB;AAC7C,2BAA2B,6DAAI;AAC/B;AACA;AACA,sCAAsC,wEAAe;AACrD;AACA,mCAAmC,qDAAqD;AACxF,aAAa;AACb;AACA;AACA;AACA,mCAAmC,iDAAiD;AACpF,cAAc;AACd,mCAAmC,oCAAoC;AACvE;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCxBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://mwicombatsimulator/./src/combatsimulator/ability.js","webpack://mwicombatsimulator/./src/combatsimulator/buff.js","webpack://mwicombatsimulator/./src/combatsimulator/combatSimulator.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUnit.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUtilities.js","webpack://mwicombatsimulator/./src/combatsimulator/consumable.js","webpack://mwicombatsimulator/./src/combatsimulator/equipment.js","webpack://mwicombatsimulator/./src/combatsimulator/events/autoAttackEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/bleedTickEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/checkBuffExpirationEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/combatEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/combatStartEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/consumableTickEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/cooldownReadyEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/enemyRespawnEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/eventQueue.js","webpack://mwicombatsimulator/./src/combatsimulator/events/playerRespawnEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/regenTickEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/stunExpirationEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/monster.js","webpack://mwicombatsimulator/./src/combatsimulator/player.js","webpack://mwicombatsimulator/./src/combatsimulator/simResult.js","webpack://mwicombatsimulator/./src/combatsimulator/trigger.js","webpack://mwicombatsimulator/./src/combatsimulator/zone.js","webpack://mwicombatsimulator/./src/worker.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/chunk loaded","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/ensure chunk","webpack://mwicombatsimulator/webpack/runtime/get javascript chunk filename","webpack://mwicombatsimulator/webpack/runtime/global","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/webpack/runtime/publicPath","webpack://mwicombatsimulator/webpack/runtime/importScripts chunk loading","webpack://mwicombatsimulator/webpack/runtime/startup chunk dependencies","webpack://mwicombatsimulator/webpack/before-startup","webpack://mwicombatsimulator/webpack/startup","webpack://mwicombatsimulator/webpack/after-startup"],"sourcesContent":["import Buff from \"./buff\";\r\nimport abilityDetailMap from \"./data/abilityDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Ability {\r\n    constructor(hrid, level, triggers = null) {\r\n        this.hrid = hrid;\r\n        this.level = level;\r\n\r\n        let gameAbility = abilityDetailMap[hrid];\r\n        if (!gameAbility) {\r\n            throw new Error(\"No ability found for hrid: \" + this.hrid);\r\n        }\r\n\r\n        this.manaCost = gameAbility.manaCost;\r\n        this.cooldownDuration = gameAbility.cooldownDuration;\r\n\r\n        this.abilityEffects = [];\r\n\r\n        for (const effect of gameAbility.abilityEffects) {\r\n            let abilityEffect = {\r\n                targetType: effect.targetType,\r\n                effectType: effect.effectType,\r\n                combatStyleHrid: effect.combatStyleHrid,\r\n                damageType: effect.damageType,\r\n                damageFlat: effect.baseDamageFlat + (this.level - 1) * effect.baseDamageFlatLevelBonus,\r\n                damageRatio: effect.baseDamageRatio + (this.level - 1) * effect.baseDamageRatioLevelBonus,\r\n                bleedRatio: effect.bleedRatio,\r\n                bleedDuration: effect.bleedDuration,\r\n                stunChance: effect.stunChance,\r\n                stunDuration: effect.stunDuration,\r\n                buffs: null,\r\n            };\r\n            if (effect.buffs) {\r\n                abilityEffect.buffs = [];\r\n                for (const buff of effect.buffs) {\r\n                    abilityEffect.buffs.push(new Buff(buff, this.level));\r\n                }\r\n            }\r\n            this.abilityEffects.push(abilityEffect);\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameAbility.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let triggers = dto.triggers.map((trigger) => Trigger.createFromDTO(trigger));\r\n        let ability = new Ability(dto.hrid, dto.level, triggers);\r\n\r\n        return ability;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (source.isStunned) {\r\n            return false;\r\n        }\r\n\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies, currentTime)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Ability;\r\n","class Buff {\r\n    startTime;\r\n\r\n    constructor(buff, level = 1) {\r\n        this.sourceHrid = buff.sourceHrid;\r\n        this.typeHrid = buff.typeHrid;\r\n        this.ratioBoost = buff.ratioBoost + (level - 1) * buff.ratioBoostLevelBonus;\r\n        this.flatBoost = buff.flatBoost + (level - 1) * buff.flatBoostLevelBonus;\r\n        this.duration = buff.duration;\r\n    }\r\n}\r\n\r\nexport default Buff;\r\n","import CombatUtilities from \"./combatUtilities\";\r\nimport AutoAttackEvent from \"./events/autoAttackEvent\";\r\nimport BleedTickEvent from \"./events/bleedTickEvent\";\r\nimport CheckBuffExpirationEvent from \"./events/checkBuffExpirationEvent\";\r\nimport CombatStartEvent from \"./events/combatStartEvent\";\r\nimport ConsumableTickEvent from \"./events/consumableTickEvent\";\r\nimport CooldownReadyEvent from \"./events/cooldownReadyEvent\";\r\nimport EnemyRespawnEvent from \"./events/enemyRespawnEvent\";\r\nimport EventQueue from \"./events/eventQueue\";\r\nimport PlayerRespawnEvent from \"./events/playerRespawnEvent\";\r\nimport RegenTickEvent from \"./events/regenTickEvent\";\r\nimport StunExpirationEvent from \"./events/stunExpirationEvent\";\r\nimport SimResult from \"./simResult\";\r\n\r\nconst ONE_SECOND = 1e9;\r\nconst HOT_TICK_INTERVAL = 5 * ONE_SECOND;\r\nconst DOT_TICK_INTERVAL = 5 * ONE_SECOND;\r\nconst REGEN_TICK_INTERVAL = 10 * ONE_SECOND;\r\nconst ENEMY_RESPAWN_INTERVAL = 3 * ONE_SECOND;\r\nconst PLAYER_RESPAWN_INTERVAL = 150 * ONE_SECOND;\r\n\r\nclass CombatSimulator extends EventTarget {\r\n    constructor(player, zone) {\r\n        super();\r\n        this.players = [player];\r\n        this.zone = zone;\r\n\r\n        this.eventQueue = new EventQueue();\r\n        this.simResult = new SimResult();\r\n    }\r\n\r\n    async simulate(simulationTimeLimit) {\r\n        this.reset();\r\n\r\n        let ticks = 0;\r\n\r\n        let combatStartEvent = new CombatStartEvent(0);\r\n        this.eventQueue.addEvent(combatStartEvent);\r\n\r\n        while (this.simulationTime < simulationTimeLimit) {\r\n            let nextEvent = this.eventQueue.getNextEvent();\r\n            await this.processEvent(nextEvent);\r\n\r\n            ticks++;\r\n            if (ticks == 1000) {\r\n                ticks = 0;\r\n                let progressEvent = new CustomEvent(\"progress\", {\r\n                    detail: Math.min(this.simulationTime / simulationTimeLimit, 1),\r\n                });\r\n                this.dispatchEvent(progressEvent);\r\n            }\r\n        }\r\n\r\n        this.simResult.simulatedTime = this.simulationTime;\r\n\r\n        return this.simResult;\r\n    }\r\n\r\n    reset() {\r\n        this.simulationTime = 0;\r\n        this.eventQueue.clear();\r\n        this.simResult = new SimResult();\r\n    }\r\n\r\n    async processEvent(event) {\r\n        this.simulationTime = event.time;\r\n\r\n        // console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        switch (event.type) {\r\n            case CombatStartEvent.type:\r\n                this.processCombatStartEvent(event);\r\n                break;\r\n            case PlayerRespawnEvent.type:\r\n                this.processPlayerRespawnEvent(event);\r\n                break;\r\n            case EnemyRespawnEvent.type:\r\n                this.processEnemyRespawnEvent(event);\r\n                break;\r\n            case AutoAttackEvent.type:\r\n                this.processAutoAttackEvent(event);\r\n                break;\r\n            case ConsumableTickEvent.type:\r\n                this.processConsumableTickEvent(event);\r\n                break;\r\n            case BleedTickEvent.type:\r\n                this.processBleedTickEvent(event);\r\n                break;\r\n            case CheckBuffExpirationEvent.type:\r\n                this.processCheckBuffExpirationEvent(event);\r\n                break;\r\n            case RegenTickEvent.type:\r\n                this.processRegenTickEvent(event);\r\n                break;\r\n            case StunExpirationEvent.type:\r\n                this.processStunExpirationEvent(event);\r\n                break;\r\n            case CooldownReadyEvent.type:\r\n                // Only used to check triggers\r\n                break;\r\n        }\r\n\r\n        this.checkTriggers();\r\n    }\r\n\r\n    processCombatStartEvent(event) {\r\n        this.players[0].reset(this.simulationTime);\r\n\r\n        this.players[0].abilities\r\n            .filter((ability) => ability != null)\r\n            .forEach((ability) => {\r\n                let cooldownReadyEvent = new CooldownReadyEvent(ability.lastUsed + ability.cooldownDuration);\r\n                this.eventQueue.addEvent(cooldownReadyEvent);\r\n            });\r\n\r\n        let regenTickEvent = new RegenTickEvent(this.simulationTime + REGEN_TICK_INTERVAL);\r\n        this.eventQueue.addEvent(regenTickEvent);\r\n\r\n        this.startNewEncounter();\r\n    }\r\n\r\n    processPlayerRespawnEvent(event) {\r\n        this.players[0].combatDetails.currentHitpoints = this.players[0].combatDetails.maxHitpoints;\r\n        this.players[0].combatDetails.currentManapoints = this.players[0].combatDetails.maxManapoints;\r\n        this.players[0].clearBuffs();\r\n\r\n        this.startAutoAttacks();\r\n    }\r\n\r\n    processEnemyRespawnEvent(event) {\r\n        this.startNewEncounter();\r\n    }\r\n\r\n    startNewEncounter() {\r\n        this.enemies = this.zone.getRandomEncounter();\r\n\r\n        this.enemies.forEach((enemy) => {\r\n            enemy.reset(this.simulationTime);\r\n            enemy.abilities\r\n                .filter((ability) => ability != null)\r\n                .forEach((ability) => {\r\n                    let cooldownReadyEvent = new CooldownReadyEvent(ability.lastUsed + ability.cooldownDuration);\r\n                    this.eventQueue.addEvent(cooldownReadyEvent);\r\n                });\r\n            // console.log(enemy.hrid, \"spawned\");\r\n        });\r\n\r\n        this.startAutoAttacks();\r\n    }\r\n\r\n    startAutoAttacks() {\r\n        let units = [this.players[0]];\r\n        if (this.enemies) {\r\n            units.push(...this.enemies);\r\n        }\r\n\r\n        for (const unit of units) {\r\n            if (unit.combatDetails.currentHitpoints <= 0) {\r\n                continue;\r\n            }\r\n\r\n            this.addNextAutoAttackEvent(unit);\r\n        }\r\n    }\r\n\r\n    processAutoAttackEvent(event) {\r\n        // console.log(\"source:\", event.source.hrid);\r\n\r\n        let target;\r\n        if (event.source.isPlayer) {\r\n            target = CombatUtilities.getTarget(this.enemies);\r\n        } else {\r\n            target = CombatUtilities.getTarget(this.players);\r\n        }\r\n\r\n        if (!target) {\r\n            return;\r\n        }\r\n\r\n        let attackResult = CombatUtilities.processAttack(event.source, target);\r\n\r\n        this.simResult.addAttack(\r\n            event.source,\r\n            target,\r\n            \"autoAttack\",\r\n            attackResult.didHit ? attackResult.damageDone : \"miss\"\r\n        );\r\n\r\n        if (attackResult.lifeStealHeal > 0) {\r\n            this.simResult.addHitpointsGained(event.source, \"lifesteal\", attackResult.lifeStealHeal);\r\n        }\r\n\r\n        if (attackResult.reflectDamageDone > 0) {\r\n            this.simResult.addAttack(target, event.source, \"physicalReflect\", attackResult.reflectDamageDone);\r\n        }\r\n\r\n        for (const [skill, xp] of Object.entries(attackResult.experienceGained.source)) {\r\n            this.simResult.addExperienceGain(event.source, skill, xp);\r\n        }\r\n        for (const [skill, xp] of Object.entries(attackResult.experienceGained.target)) {\r\n            this.simResult.addExperienceGain(target, skill, xp);\r\n        }\r\n\r\n        if (target.combatDetails.currentHitpoints == 0) {\r\n            this.eventQueue.clearEventsForUnit(target);\r\n            this.simResult.addDeath(target);\r\n            // console.log(target.hrid, \"died\");\r\n        }\r\n\r\n        // Could die from reflect damage\r\n        if (event.source.combatDetails.currentHitpoints == 0) {\r\n            this.eventQueue.clearEventsForUnit(event.source);\r\n            this.simResult.addDeath(event.source);\r\n        }\r\n\r\n        if (!this.checkEncounterEnd()) {\r\n            this.addNextAutoAttackEvent(event.source);\r\n        }\r\n    }\r\n\r\n    checkEncounterEnd() {\r\n        let encounterEnded = false;\r\n\r\n        if (this.enemies && !this.enemies.some((enemy) => enemy.combatDetails.currentHitpoints > 0)) {\r\n            this.eventQueue.clearEventsOfType(AutoAttackEvent.type);\r\n            let enemyRespawnEvent = new EnemyRespawnEvent(this.simulationTime + ENEMY_RESPAWN_INTERVAL);\r\n            this.eventQueue.addEvent(enemyRespawnEvent);\r\n            this.enemies = null;\r\n\r\n            this.simResult.addEncounterEnd();\r\n            // console.log(\"All enemies died\");\r\n\r\n            encounterEnded = true;\r\n        }\r\n\r\n        if (\r\n            !this.players.some((player) => player.combatDetails.currentHitpoints > 0) &&\r\n            !this.eventQueue.containsEventOfType(PlayerRespawnEvent.type)\r\n        ) {\r\n            this.eventQueue.clearEventsOfType(AutoAttackEvent.type);\r\n            // 120 seconds respawn and 30 seconds traveling to battle\r\n            let playerRespawnEvent = new PlayerRespawnEvent(this.simulationTime + PLAYER_RESPAWN_INTERVAL);\r\n            this.eventQueue.addEvent(playerRespawnEvent);\r\n            // console.log(\"Player died\");\r\n\r\n            encounterEnded = true;\r\n        }\r\n\r\n        return encounterEnded;\r\n    }\r\n\r\n    addNextAutoAttackEvent(source) {\r\n        let autoAttackEvent = new AutoAttackEvent(\r\n            this.simulationTime + source.combatDetails.combatStats.attackInterval,\r\n            source\r\n        );\r\n        this.eventQueue.addEvent(autoAttackEvent);\r\n    }\r\n\r\n    processConsumableTickEvent(event) {\r\n        if (event.consumable.hitpointRestore > 0) {\r\n            let tickValue = CombatUtilities.calculateTickValue(\r\n                event.consumable.hitpointRestore,\r\n                event.totalTicks,\r\n                event.currentTick\r\n            );\r\n            let hitpointsAdded = event.source.addHitpoints(tickValue);\r\n            this.simResult.addHitpointsGained(event.source, event.consumable.hrid, hitpointsAdded);\r\n            // console.log(\"Added hitpoints:\", hitpointsAdded);\r\n        }\r\n\r\n        if (event.consumable.manapointRestore > 0) {\r\n            let tickValue = CombatUtilities.calculateTickValue(\r\n                event.consumable.manapointRestore,\r\n                event.totalTicks,\r\n                event.currentTick\r\n            );\r\n            let manapointsAdded = event.source.addManapoints(tickValue);\r\n            this.simResult.addManapointsGained(event.source, event.consumable.hrid, manapointsAdded);\r\n            // console.log(\"Added manapoints:\", manapointsAdded);\r\n        }\r\n\r\n        if (event.currentTick < event.totalTicks) {\r\n            let consumableTickEvent = new ConsumableTickEvent(\r\n                this.simulationTime + HOT_TICK_INTERVAL,\r\n                event.source,\r\n                event.consumable,\r\n                event.totalTicks,\r\n                event.currentTick + 1\r\n            );\r\n            this.eventQueue.addEvent(consumableTickEvent);\r\n        }\r\n    }\r\n\r\n    processBleedTickEvent(event) {\r\n        let tickDamage = CombatUtilities.calculateTickValue(event.damage, event.totalTicks, event.currentTick);\r\n        let damage = Math.min(tickDamage, event.target.combatDetails.currentHitpoints);\r\n\r\n        event.target.combatDetails.currentHitpoints -= damage;\r\n        this.simResult.addAttack(event.sourceRef, event.target, \"bleed\", damage);\r\n\r\n        let targetStaminaExperience = CombatUtilities.calculateStaminaExperience(0, damage);\r\n        this.simResult.addExperienceGain(event.target, \"stamina\", targetStaminaExperience);\r\n        // console.log(event.target.hrid, \"bleed for\", damage);\r\n\r\n        if (event.currentTick < event.totalTicks) {\r\n            let bleedTickEvent = new BleedTickEvent(\r\n                this.simulationTime + DOT_TICK_INTERVAL,\r\n                event.sourceRef,\r\n                event.target,\r\n                event.damage,\r\n                event.totalTicks,\r\n                event.currentTick + 1\r\n            );\r\n            this.eventQueue.addEvent(bleedTickEvent);\r\n        }\r\n\r\n        if (event.target.combatDetails.currentHitpoints == 0) {\r\n            this.eventQueue.clearEventsForUnit(event.target);\r\n            this.simResult.addDeath(event.target);\r\n        }\r\n\r\n        this.checkEncounterEnd();\r\n    }\r\n\r\n    processRegenTickEvent(event) {\r\n        let units = [...this.players];\r\n        if (this.enemies) {\r\n            units.push(...this.enemies);\r\n        }\r\n\r\n        for (const unit of units) {\r\n            if (unit.combatDetails.currentHitpoints <= 0) {\r\n                continue;\r\n            }\r\n\r\n            let hitpointRegen = Math.floor(unit.combatDetails.maxHitpoints * unit.combatDetails.combatStats.HPRegen);\r\n            let hitpointsAdded = unit.addHitpoints(hitpointRegen);\r\n            this.simResult.addHitpointsGained(unit, \"regen\", hitpointsAdded);\r\n            // console.log(\"Added hitpoints:\", hitpointsAdded);\r\n\r\n            let manapointRegen = Math.floor(unit.combatDetails.maxManapoints * unit.combatDetails.combatStats.MPRegen);\r\n            let manapointsAdded = unit.addManapoints(manapointRegen);\r\n            this.simResult.addManapointsGained(unit, \"regen\", manapointsAdded);\r\n            // console.log(\"Added manapoints:\", manapointsAdded);\r\n        }\r\n\r\n        let regenTickEvent = new RegenTickEvent(this.simulationTime + REGEN_TICK_INTERVAL);\r\n        this.eventQueue.addEvent(regenTickEvent);\r\n    }\r\n\r\n    processCheckBuffExpirationEvent(event) {\r\n        event.source.removeExpiredBuffs(this.simulationTime);\r\n    }\r\n\r\n    processStunExpirationEvent(event) {\r\n        event.source.isStunned = false;\r\n        this.addNextAutoAttackEvent(event.source);\r\n    }\r\n\r\n    checkTriggers() {\r\n        let triggeredSomething;\r\n\r\n        do {\r\n            triggeredSomething = false;\r\n\r\n            this.players\r\n                .filter((player) => player.combatDetails.currentHitpoints > 0)\r\n                .forEach((player) => {\r\n                    if (this.checkTriggersForUnit(player, this.players, this.enemies)) {\r\n                        triggeredSomething = true;\r\n                    }\r\n                });\r\n\r\n            if (this.enemies) {\r\n                this.enemies\r\n                    .filter((enemy) => enemy.combatDetails.currentHitpoints > 0)\r\n                    .forEach((enemy) => {\r\n                        if (this.checkTriggersForUnit(enemy, this.enemies, this.players)) {\r\n                            triggeredSomething = true;\r\n                        }\r\n                    });\r\n            }\r\n        } while (triggeredSomething);\r\n    }\r\n\r\n    checkTriggersForUnit(unit, friendlies, enemies) {\r\n        if (unit.combatDetails.currentHitpoints <= 0) {\r\n            throw new Error(\"Checking triggers for a dead unit\");\r\n        }\r\n\r\n        let triggeredSomething = false;\r\n        let target = CombatUtilities.getTarget(enemies);\r\n\r\n        for (const food of unit.food) {\r\n            if (food && food.shouldTrigger(this.simulationTime, unit, target, friendlies, enemies)) {\r\n                let result = this.tryUseConsumable(unit, food);\r\n                if (result) {\r\n                    triggeredSomething = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const drink of unit.drinks) {\r\n            if (drink && drink.shouldTrigger(this.simulationTime, unit, target, friendlies, enemies)) {\r\n                let result = this.tryUseConsumable(unit, drink);\r\n                if (result) {\r\n                    triggeredSomething = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const ability of unit.abilities) {\r\n            if (ability && ability.shouldTrigger(this.simulationTime, unit, target, friendlies, enemies)) {\r\n                let result = this.tryUseAbility(unit, ability);\r\n                if (result) {\r\n                    triggeredSomething = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return triggeredSomething;\r\n    }\r\n\r\n    tryUseConsumable(source, consumable) {\r\n        // console.log(\"Consuming:\", consumable);\r\n\r\n        if (source.combatDetails.currentHitpoints <= 0) {\r\n            return false;\r\n        }\r\n\r\n        consumable.lastUsed = this.simulationTime;\r\n        let cooldownReadyEvent = new CooldownReadyEvent(this.simulationTime + consumable.cooldownDuration);\r\n        this.eventQueue.addEvent(cooldownReadyEvent);\r\n\r\n        this.simResult.addConsumableUse(source, consumable);\r\n\r\n        if (consumable.recoveryDuration == 0) {\r\n            if (consumable.hitpointRestore > 0) {\r\n                let hitpointsAdded = source.addHitpoints(consumable.hitpointRestore);\r\n                this.simResult.addHitpointsGained(source, consumable.hrid, hitpointsAdded);\r\n                // console.log(\"Added hitpoints:\", hitpointsAdded);\r\n            }\r\n\r\n            if (consumable.manapointRestore > 0) {\r\n                let manapointsAdded = source.addManapoints(consumable.manapointRestore);\r\n                this.simResult.addManapointsGained(source, consumable.hrid, manapointsAdded);\r\n                // console.log(\"Added manapoints:\", manapointsAdded);\r\n            }\r\n        } else {\r\n            let consumableTickEvent = new ConsumableTickEvent(\r\n                this.simulationTime + HOT_TICK_INTERVAL,\r\n                source,\r\n                consumable,\r\n                consumable.recoveryDuration / HOT_TICK_INTERVAL,\r\n                1\r\n            );\r\n            this.eventQueue.addEvent(consumableTickEvent);\r\n        }\r\n\r\n        for (const buff of consumable.buffs) {\r\n            source.addBuff(buff, this.simulationTime);\r\n            // console.log(\"Added buff:\", buff);\r\n            let checkBuffExpirationEvent = new CheckBuffExpirationEvent(this.simulationTime + buff.duration, source);\r\n            this.eventQueue.addEvent(checkBuffExpirationEvent);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    tryUseAbility(source, ability) {\r\n        if (source.combatDetails.currentHitpoints <= 0) {\r\n            return false;\r\n        }\r\n\r\n        if (source.combatDetails.currentManapoints < ability.manaCost) {\r\n            if (source.isPlayer) {\r\n                this.simResult.playerRanOutOfMana = true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // console.log(\"Casting:\", ability);\r\n\r\n        source.combatDetails.currentManapoints -= ability.manaCost;\r\n\r\n        let sourceIntelligenceExperience = CombatUtilities.calculateIntelligenceExperience(ability.manaCost);\r\n        this.simResult.addExperienceGain(source, \"intelligence\", sourceIntelligenceExperience);\r\n\r\n        ability.lastUsed = this.simulationTime;\r\n        let cooldownReadyEvent = new CooldownReadyEvent(this.simulationTime + ability.cooldownDuration);\r\n        this.eventQueue.addEvent(cooldownReadyEvent);\r\n\r\n        for (const abilityEffect of ability.abilityEffects) {\r\n            switch (abilityEffect.effectType) {\r\n                case \"/ability_effect_types/buff\":\r\n                    this.processAbilityBuffEffect(source, ability, abilityEffect);\r\n                    break;\r\n                case \"/ability_effect_types/damage\":\r\n                    this.processAbilityDamageEffect(source, ability, abilityEffect);\r\n                    break;\r\n                case \"/ability_effect_types/heal\":\r\n                    this.processAbilityHealEffect(source, ability, abilityEffect);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unsupported effect type for ability: \" + ability.hrid);\r\n            }\r\n        }\r\n\r\n        // Could die from reflect damage\r\n        if (source.combatDetails.currentHitpoints == 0) {\r\n            this.eventQueue.clearEventsForUnit(source);\r\n            this.simResult.addDeath(source);\r\n        }\r\n\r\n        this.checkEncounterEnd();\r\n\r\n        return true;\r\n    }\r\n\r\n    processAbilityBuffEffect(source, ability, abilityEffect) {\r\n        if (abilityEffect.targetType != \"self\") {\r\n            throw new Error(\"Unsupported target type for buff ability effect: \" + ability.hrid);\r\n        }\r\n\r\n        for (const buff of abilityEffect.buffs) {\r\n            source.addBuff(buff, this.simulationTime);\r\n            // console.log(\"Added buff:\", abilityEffect.buff);\r\n            let checkBuffExpirationEvent = new CheckBuffExpirationEvent(this.simulationTime + buff.duration, source);\r\n            this.eventQueue.addEvent(checkBuffExpirationEvent);\r\n        }\r\n    }\r\n\r\n    processAbilityDamageEffect(source, ability, abilityEffect) {\r\n        let targets;\r\n        switch (abilityEffect.targetType) {\r\n            case \"enemy\":\r\n                targets = source.isPlayer\r\n                    ? [CombatUtilities.getTarget(this.enemies)]\r\n                    : [CombatUtilities.getTarget(this.players)];\r\n                break;\r\n            case \"all enemies\":\r\n                targets = source.isPlayer ? this.enemies : this.players;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unsupported target type for damage ability effect: \" + ability.hrid);\r\n        }\r\n\r\n        for (const target of targets.filter((unit) => unit && unit.combatDetails.currentHitpoints > 0)) {\r\n            let attackResult = CombatUtilities.processAttack(source, target, abilityEffect);\r\n\r\n            if (attackResult.didHit && abilityEffect.buffs) {\r\n                for (const buff of abilityEffect.buffs) {\r\n                    target.addBuff(buff, this.simulationTime);\r\n                    let checkBuffExpirationEvent = new CheckBuffExpirationEvent(\r\n                        this.simulationTime + buff.duration,\r\n                        target\r\n                    );\r\n                    this.eventQueue.addEvent(checkBuffExpirationEvent);\r\n                }\r\n            }\r\n\r\n            if (abilityEffect.bleedRatio > 0 && attackResult.damageDone > 0) {\r\n                let bleedTickEvent = new BleedTickEvent(\r\n                    this.simulationTime + DOT_TICK_INTERVAL,\r\n                    source,\r\n                    target,\r\n                    attackResult.damageDone * abilityEffect.bleedRatio,\r\n                    abilityEffect.bleedDuration / DOT_TICK_INTERVAL,\r\n                    1\r\n                );\r\n                this.eventQueue.addEvent(bleedTickEvent);\r\n            }\r\n\r\n            if (attackResult.didHit && abilityEffect.stunChance > 0 && Math.random() < abilityEffect.stunChance) {\r\n                target.isStunned = true;\r\n                target.stunExpireTime = this.simulationTime + abilityEffect.stunDuration;\r\n                this.eventQueue.clearMatching((event) => event.type == AutoAttackEvent.type && event.source == target);\r\n                let stunExpirationEvent = new StunExpirationEvent(target.stunExpireTime, target);\r\n                this.eventQueue.addEvent(stunExpirationEvent);\r\n            }\r\n\r\n            this.simResult.addAttack(\r\n                source,\r\n                target,\r\n                ability.hrid,\r\n                attackResult.didHit ? attackResult.damageDone : \"miss\"\r\n            );\r\n\r\n            if (attackResult.reflectDamageDone > 0) {\r\n                this.simResult.addAttack(target, source, \"physicalReflect\", attackResult.reflectDamageDone);\r\n            }\r\n\r\n            for (const [skill, xp] of Object.entries(attackResult.experienceGained.source)) {\r\n                this.simResult.addExperienceGain(source, skill, xp);\r\n            }\r\n            for (const [skill, xp] of Object.entries(attackResult.experienceGained.target)) {\r\n                this.simResult.addExperienceGain(target, skill, xp);\r\n            }\r\n\r\n            if (target.combatDetails.currentHitpoints == 0) {\r\n                this.eventQueue.clearEventsForUnit(target);\r\n                this.simResult.addDeath(target);\r\n                // console.log(target.hrid, \"died\");\r\n            }\r\n        }\r\n    }\r\n\r\n    processAbilityHealEffect(source, ability, abilityEffect) {\r\n        if (abilityEffect.targetType != \"self\") {\r\n            throw new Error(\"Unsupported target type for heal ability effect: \" + ability.hrid);\r\n        }\r\n\r\n        let amountHealed = CombatUtilities.processHeal(source, abilityEffect);\r\n        let experienceGained = CombatUtilities.calculateMagicExperience(amountHealed);\r\n\r\n        this.simResult.addHitpointsGained(source, ability.hrid, amountHealed);\r\n        this.simResult.addExperienceGain(source, \"magic\", experienceGained);\r\n    }\r\n}\r\n\r\nexport default CombatSimulator;\r\n","class CombatUnit {\r\n    isPlayer;\r\n    isStunned = false;\r\n    stunExpireTime = null;\r\n\r\n    // Base levels which don't change after initialization\r\n    staminaLevel = 1;\r\n    intelligenceLevel = 1;\r\n    attackLevel = 1;\r\n    powerLevel = 1;\r\n    defenseLevel = 1;\r\n    rangedLevel = 1;\r\n    magicLevel = 1;\r\n\r\n    abilities = [null, null, null, null];\r\n    food = [null, null, null];\r\n    drinks = [null, null, null];\r\n\r\n    // Calculated combat stats including temporary buffs\r\n    combatDetails = {\r\n        staminaLevel: 1,\r\n        intelligenceLevel: 1,\r\n        attackLevel: 1,\r\n        powerLevel: 1,\r\n        defenseLevel: 1,\r\n        rangedLevel: 1,\r\n        magicLevel: 1,\r\n        maxHitpoints: 110,\r\n        currentHitpoints: 110,\r\n        maxManapoints: 110,\r\n        currentManapoints: 110,\r\n        stabAccuracyRating: 11,\r\n        slashAccuracyRating: 11,\r\n        smashAccuracyRating: 11,\r\n        rangedAccuracyRating: 11,\r\n        stabMaxDamage: 11,\r\n        slashMaxDamage: 11,\r\n        smashMaxDamage: 11,\r\n        rangedMaxDamage: 11,\r\n        magicMaxDamage: 11,\r\n        stabEvasionRating: 11,\r\n        slashEvasionRating: 11,\r\n        smashEvasionRating: 11,\r\n        rangedEvasionRating: 11,\r\n        totalArmor: 0.2,\r\n        totalWaterResistance: 0.4,\r\n        totalNatureResistance: 0.4,\r\n        totalFireResistance: 0.4,\r\n        combatStats: {\r\n            combatStyleHrid: \"/combat_styles/smash\",\r\n            damageType: \"/damage_types/physical\",\r\n            attackInterval: 3000000000,\r\n            stabAccuracy: 0,\r\n            slashAccuracy: 0,\r\n            smashAccuracy: 0,\r\n            rangedAccuracy: 0,\r\n            stabDamage: 0,\r\n            slashDamage: 0,\r\n            smashDamage: 0,\r\n            rangedDamage: 0,\r\n            magicDamage: 0,\r\n            physicalAmplify: 0,\r\n            waterAmplify: 0,\r\n            natureAmplify: 0,\r\n            fireAmplify: 0,\r\n            healingAmplify: 0,\r\n            stabEvasion: 0,\r\n            slashEvasion: 0,\r\n            smashEvasion: 0,\r\n            rangedEvasion: 0,\r\n            armor: 0,\r\n            waterResistance: 0,\r\n            natureResistance: 0,\r\n            fireResistance: 0,\r\n            maxHitpoints: 0,\r\n            maxManapoints: 0,\r\n            lifeSteal: 0,\r\n            HPRegen: 0.01,\r\n            MPRegen: 0.01,\r\n            physicalReflectPower: 0,\r\n            dropRate: 0,\r\n            dropQuantity: 0,\r\n            experienceRate: 0,\r\n            foodSlots: 1,\r\n            drinkSlots: 1,\r\n        },\r\n    };\r\n    combatBuffs = {};\r\n\r\n    constructor() {}\r\n\r\n    updateCombatDetails() {\r\n        this.combatDetails.combatStats.HPRegen = 0.01;\r\n        this.combatDetails.combatStats.MPRegen = 0.01;\r\n\r\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((stat) => {\r\n            this.combatDetails[stat + \"Level\"] = this[stat + \"Level\"];\r\n            let boosts = this.getBuffBoosts(\"/buff_types/\" + stat + \"_level\");\r\n            boosts.forEach((buff) => {\r\n                this.combatDetails[stat + \"Level\"] += Math.floor(this[stat + \"Level\"] * buff.ratioBoost);\r\n                this.combatDetails[stat + \"Level\"] += buff.flatBoost;\r\n            });\r\n        });\r\n\r\n        this.combatDetails.maxHitpoints =\r\n            10 * (10 + this.combatDetails.staminaLevel) + this.combatDetails.combatStats.maxHitpoints;\r\n        this.combatDetails.maxManapoints =\r\n            10 * (10 + this.combatDetails.intelligenceLevel) + this.combatDetails.combatStats.maxManapoints;\r\n\r\n        let accuracyRatioBoost = this.getBuffBoost(\"/buff_types/accuracy\").ratioBoost;\r\n        let damageRatioBoost = this.getBuffBoost(\"/buff_types/damage\").ratioBoost;\r\n\r\n        [\"stab\", \"slash\", \"smash\"].forEach((style) => {\r\n            this.combatDetails[style + \"AccuracyRating\"] =\r\n                (10 + this.combatDetails.attackLevel) *\r\n                (1 + this.combatDetails.combatStats[style + \"Accuracy\"]) *\r\n                (1 + accuracyRatioBoost);\r\n            this.combatDetails[style + \"MaxDamage\"] =\r\n                (10 + this.combatDetails.powerLevel) *\r\n                (1 + this.combatDetails.combatStats[style + \"Damage\"]) *\r\n                (1 + damageRatioBoost);\r\n            this.combatDetails[style + \"EvasionRating\"] =\r\n                (10 + this.combatDetails.defenseLevel) * (1 + this.combatDetails.combatStats[style + \"Evasion\"]);\r\n        });\r\n\r\n        this.combatDetails.rangedAccuracyRating =\r\n            (10 + this.combatDetails.rangedLevel) *\r\n            (1 + this.combatDetails.combatStats.rangedAccuracy) *\r\n            (1 + accuracyRatioBoost);\r\n        this.combatDetails.rangedMaxDamage =\r\n            (10 + this.combatDetails.rangedLevel) *\r\n            (1 + this.combatDetails.combatStats.rangedDamage) *\r\n            (1 + damageRatioBoost);\r\n        this.combatDetails.rangedEvasionRating =\r\n            (10 + this.combatDetails.defenseLevel) * (1 + this.combatDetails.combatStats.rangedEvasion);\r\n\r\n        this.combatDetails.magicMaxDamage =\r\n            (10 + this.combatDetails.magicLevel) *\r\n            (1 + this.combatDetails.combatStats.magicDamage) *\r\n            (1 + damageRatioBoost);\r\n\r\n        this.combatDetails.combatStats.physicalAmplify += this.getBuffBoost(\"/buff_types/physical_amplify\").flatBoost;\r\n        this.combatDetails.combatStats.waterAmplify += this.getBuffBoost(\"/buff_types/water_amplify\").flatBoost;\r\n        this.combatDetails.combatStats.natureAmplify += this.getBuffBoost(\"/buff_types/nature_amplify\").flatBoost;\r\n        this.combatDetails.combatStats.fireAmplify += this.getBuffBoost(\"/buff_types/fire_amplify\").flatBoost;\r\n\r\n        let attackIntervalBoosts = this.getBuffBoosts(\"/buff_types/attack_speed\");\r\n        let attackIntervalRatioBoost = attackIntervalBoosts\r\n            .map((boost) => boost.ratioBoost)\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n        this.combatDetails.combatStats.attackInterval =\r\n            this.combatDetails.combatStats.attackInterval * (1 / (1 + attackIntervalRatioBoost));\r\n\r\n        let baseArmor = 0.2 * this.combatDetails.defenseLevel + this.combatDetails.combatStats.armor;\r\n        this.combatDetails.totalArmor = baseArmor;\r\n        let armorBoosts = this.getBuffBoosts(\"/buff_types/armor\");\r\n        for (const boost of armorBoosts) {\r\n            this.combatDetails.totalArmor += boost.flatBoost;\r\n            this.combatDetails.totalArmor += baseArmor * boost.ratioBoost;\r\n        }\r\n\r\n        let baseWaterResistance =\r\n            0.1 * this.combatDetails.defenseLevel +\r\n            0.3 * this.combatDetails.magicLevel +\r\n            this.combatDetails.combatStats.waterResistance;\r\n        this.combatDetails.totalWaterResistance = baseWaterResistance;\r\n        let waterResistanceBoosts = this.getBuffBoosts(\"/buff_types/water_resistance\");\r\n        for (const boost of waterResistanceBoosts) {\r\n            this.combatDetails.totalWaterResistance += boost.flatBoost;\r\n            this.combatDetails.totalWaterResistance += baseWaterResistance * boost.ratioBoost;\r\n        }\r\n\r\n        let baseNatureResistance =\r\n            0.1 * this.combatDetails.defenseLevel +\r\n            0.3 * this.combatDetails.magicLevel +\r\n            this.combatDetails.combatStats.natureResistance;\r\n        this.combatDetails.totalNatureResistance = baseNatureResistance;\r\n        let natureResistanceBoosts = this.getBuffBoosts(\"/buff_types/nature_resistance\");\r\n        for (const boost of natureResistanceBoosts) {\r\n            this.combatDetails.totalNatureResistance += boost.flatBoost;\r\n            this.combatDetails.totalNatureResistance += baseNatureResistance * boost.ratioBoost;\r\n        }\r\n\r\n        let baseFireResistance =\r\n            0.1 * this.combatDetails.defenseLevel +\r\n            0.3 * this.combatDetails.magicLevel +\r\n            this.combatDetails.combatStats.fireResistance;\r\n        this.combatDetails.totalFireResistance = baseFireResistance;\r\n        let fireResistanceBoosts = this.getBuffBoosts(\"/buff_types/fire_resistance\");\r\n        for (const boost of fireResistanceBoosts) {\r\n            this.combatDetails.totalFireResistance += boost.flatBoost;\r\n            this.combatDetails.totalFireResistance += baseFireResistance * boost.ratioBoost;\r\n        }\r\n\r\n        this.combatDetails.combatStats.lifeSteal += this.getBuffBoost(\"/buff_types/life_steal\").flatBoost;\r\n        this.combatDetails.combatStats.HPRegen += this.getBuffBoost(\"/buff_types/hp_regen\").flatBoost;\r\n        this.combatDetails.combatStats.MPRegen += this.getBuffBoost(\"/buff_types/mp_regen\").flatBoost;\r\n        this.combatDetails.combatStats.physicalReflectPower += this.getBuffBoost(\r\n            \"/buff_types/physical_reflect_power\"\r\n        ).flatBoost;\r\n        this.combatDetails.combatStats.dropRate += this.getBuffBoost(\"/buff_types/combat_drop_rate\").ratioBoost;\r\n        this.combatDetails.combatStats.experienceRate += this.getBuffBoost(\"/buff_types/wisdom\").flatBoost;\r\n    }\r\n\r\n    addBuff(buff, currentTime) {\r\n        buff.startTime = currentTime;\r\n        this.combatBuffs[buff.sourceHrid] = buff;\r\n\r\n        this.updateCombatDetails();\r\n    }\r\n\r\n    removeExpiredBuffs(currentTime) {\r\n        let expiredBuffs = Object.values(this.combatBuffs).filter(\r\n            (buff) => buff.startTime + buff.duration <= currentTime\r\n        );\r\n        expiredBuffs.forEach((buff) => {\r\n            delete this.combatBuffs[buff.sourceHrid];\r\n        });\r\n\r\n        this.updateCombatDetails();\r\n    }\r\n\r\n    clearBuffs() {\r\n        this.combatBuffs = {};\r\n        this.updateCombatDetails();\r\n    }\r\n\r\n    getBuffBoosts(type) {\r\n        let boosts = [];\r\n        Object.values(this.combatBuffs)\r\n            .filter((buff) => buff.typeHrid == type)\r\n            .forEach((buff) => {\r\n                boosts.push({ ratioBoost: buff.ratioBoost, flatBoost: buff.flatBoost });\r\n            });\r\n\r\n        return boosts;\r\n    }\r\n\r\n    getBuffBoost(type) {\r\n        let boosts = this.getBuffBoosts(type);\r\n\r\n        if (boosts.length > 1) {\r\n            throw new Error(\"Using getBuffBoost with multiple buffs active: \" + type);\r\n        }\r\n\r\n        let boost = {\r\n            ratioBoost: boosts[0]?.ratioBoost ?? 0,\r\n            flatBoost: boosts[0]?.flatBoost ?? 0,\r\n        };\r\n\r\n        return boost;\r\n    }\r\n\r\n    reset(currentTime = 0) {\r\n        this.isStunned = false;\r\n        this.stunExpireTime = null;\r\n\r\n        this.clearBuffs();\r\n        this.updateCombatDetails();\r\n        this.resetCooldowns(currentTime);\r\n\r\n        this.combatDetails.currentHitpoints = this.combatDetails.maxHitpoints;\r\n        this.combatDetails.currentManapoints = this.combatDetails.maxManapoints;\r\n    }\r\n\r\n    resetCooldowns(currentTime = 0) {\r\n        this.food.filter((food) => food != null).forEach((food) => (food.lastUsed = Number.MIN_SAFE_INTEGER));\r\n        this.drinks.filter((drink) => drink != null).forEach((drink) => (drink.lastUsed = Number.MIN_SAFE_INTEGER));\r\n\r\n        this.abilities\r\n            .filter((ability) => ability != null)\r\n            .forEach((ability) => {\r\n                if (this.isPlayer) {\r\n                    ability.lastUsed = Number.MIN_SAFE_INTEGER;\r\n                } else {\r\n                    ability.lastUsed = currentTime - Math.floor(Math.random() * ability.cooldownDuration);\r\n                }\r\n            });\r\n    }\r\n\r\n    addHitpoints(hitpoints) {\r\n        let hitpointsAdded = 0;\r\n\r\n        if (this.combatDetails.currentHitpoints >= this.combatDetails.maxHitpoints) {\r\n            return hitpointsAdded;\r\n        }\r\n\r\n        let newHitpoints = Math.min(this.combatDetails.currentHitpoints + hitpoints, this.combatDetails.maxHitpoints);\r\n        hitpointsAdded = newHitpoints - this.combatDetails.currentHitpoints;\r\n        this.combatDetails.currentHitpoints = newHitpoints;\r\n\r\n        return hitpointsAdded;\r\n    }\r\n\r\n    addManapoints(manapoints) {\r\n        let manapointsAdded = 0;\r\n\r\n        if (this.combatDetails.currentManapoints >= this.combatDetails.maxManapoints) {\r\n            return manapointsAdded;\r\n        }\r\n\r\n        let newManapoints = Math.min(\r\n            this.combatDetails.currentManapoints + manapoints,\r\n            this.combatDetails.maxManapoints\r\n        );\r\n        manapointsAdded = newManapoints - this.combatDetails.currentManapoints;\r\n        this.combatDetails.currentManapoints = newManapoints;\r\n\r\n        return manapointsAdded;\r\n    }\r\n}\r\n\r\nexport default CombatUnit;\r\n","class CombatUtilities {\r\n    static getTarget(enemies) {\r\n        if (!enemies) {\r\n            return null;\r\n        }\r\n        let target = enemies.find((enemy) => enemy.combatDetails.currentHitpoints > 0);\r\n\r\n        return target ?? null;\r\n    }\r\n\r\n    static randomInt(min, max) {\r\n        if (max < min) {\r\n            let temp = min;\r\n            min = max;\r\n            max = temp;\r\n        }\r\n\r\n        let minCeil = Math.ceil(min);\r\n        let maxFloor = Math.floor(max);\r\n\r\n        if (Math.floor(min) == maxFloor) {\r\n            return Math.floor((min + max) / 2 + Math.random());\r\n        }\r\n\r\n        let minTail = -1 * (min - minCeil);\r\n        let maxTail = max - maxFloor;\r\n\r\n        let balancedWeight = 2 * minTail + (maxFloor - minCeil);\r\n        let balancedAverage = (maxFloor + minCeil) / 2;\r\n        let average = (max + min) / 2;\r\n        let extraTailWeight = (balancedWeight * (average - balancedAverage)) / (maxFloor + 1 - average);\r\n        let extraTailChance = Math.abs(extraTailWeight / (extraTailWeight + balancedWeight));\r\n\r\n        if (Math.random() < extraTailChance) {\r\n            if (maxTail > minTail) {\r\n                return Math.floor(maxFloor + 1);\r\n            } else {\r\n                return Math.floor(minCeil - 1);\r\n            }\r\n        }\r\n\r\n        if (maxTail > minTail) {\r\n            return Math.floor(min + Math.random() * (maxFloor + minTail - min + 1));\r\n        } else {\r\n            return Math.floor(minCeil - maxTail + Math.random() * (max - (minCeil - maxTail) + 1));\r\n        }\r\n    }\r\n\r\n    static processAttack(source, target, abilityEffect = null) {\r\n        let combatStyle = abilityEffect\r\n            ? abilityEffect.combatStyleHrid\r\n            : source.combatDetails.combatStats.combatStyleHrid;\r\n        let damageType = abilityEffect ? abilityEffect.damageType : source.combatDetails.combatStats.damageType;\r\n\r\n        let sourceAccuracyRating = 1;\r\n        let sourceAutoAttackMaxDamage = 1;\r\n        let targetEvasionRating = 1;\r\n\r\n        switch (combatStyle) {\r\n            case \"/combat_styles/stab\":\r\n                sourceAccuracyRating = source.combatDetails.stabAccuracyRating;\r\n                sourceAutoAttackMaxDamage = source.combatDetails.stabMaxDamage;\r\n                targetEvasionRating = target.combatDetails.stabEvasionRating;\r\n                break;\r\n            case \"/combat_styles/slash\":\r\n                sourceAccuracyRating = source.combatDetails.slashAccuracyRating;\r\n                sourceAutoAttackMaxDamage = source.combatDetails.slashMaxDamage;\r\n                targetEvasionRating = target.combatDetails.slashEvasionRating;\r\n                break;\r\n            case \"/combat_styles/smash\":\r\n                sourceAccuracyRating = source.combatDetails.smashAccuracyRating;\r\n                sourceAutoAttackMaxDamage = source.combatDetails.smashMaxDamage;\r\n                targetEvasionRating = target.combatDetails.smashEvasionRating;\r\n                break;\r\n            case \"/combat_styles/ranged\":\r\n                sourceAccuracyRating = source.combatDetails.rangedAccuracyRating;\r\n                sourceAutoAttackMaxDamage = source.combatDetails.rangedMaxDamage;\r\n                targetEvasionRating = target.combatDetails.rangedEvasionRating;\r\n                break;\r\n            case \"/combat_styles/magic\":\r\n                sourceAutoAttackMaxDamage = source.combatDetails.magicMaxDamage;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown combat style: \" + combatStyle);\r\n        }\r\n\r\n        let sourceDamageMultiplier = 1;\r\n        let sourceResistance = 0;\r\n        let targetResistance = 0;\r\n        let targetReflectPower = 0;\r\n\r\n        switch (damageType) {\r\n            case \"/damage_types/physical\":\r\n                sourceDamageMultiplier = 1 + source.combatDetails.combatStats.physicalAmplify;\r\n                sourceResistance = source.combatDetails.totalArmor;\r\n                targetResistance = target.combatDetails.totalArmor;\r\n                targetReflectPower = target.combatDetails.combatStats.physicalReflectPower;\r\n                break;\r\n            case \"/damage_types/water\":\r\n                sourceDamageMultiplier = 1 + source.combatDetails.combatStats.waterAmplify;\r\n                sourceResistance = source.combatDetails.totalWaterResistance;\r\n                targetResistance = target.combatDetails.totalWaterResistance;\r\n                break;\r\n            case \"/damage_types/nature\":\r\n                sourceDamageMultiplier = 1 + source.combatDetails.combatStats.natureAmplify;\r\n                sourceResistance = source.combatDetails.totalNatureResistance;\r\n                targetResistance = target.combatDetails.totalNatureResistance;\r\n                break;\r\n            case \"/damage_types/fire\":\r\n                sourceDamageMultiplier = 1 + source.combatDetails.combatStats.fireAmplify;\r\n                sourceResistance = source.combatDetails.totalFireResistance;\r\n                targetResistance = target.combatDetails.totalFireResistance;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown damage type: \" + damageType);\r\n        }\r\n\r\n        let hitChance = 1;\r\n        let critChance = 0;\r\n\r\n        if (combatStyle != \"/combat_styles/magic\") {\r\n            hitChance =\r\n                Math.pow(sourceAccuracyRating, 1.4) /\r\n                (Math.pow(sourceAccuracyRating, 1.4) + Math.pow(targetEvasionRating, 1.4));\r\n        }\r\n\r\n        if (combatStyle == \"/combat_styles/ranged\") {\r\n            critChance = 0.3 * hitChance;\r\n        }\r\n\r\n        let baseDamageFlat = abilityEffect ? abilityEffect.damageFlat : 0;\r\n        let baseDamageRatio = abilityEffect ? abilityEffect.damageRatio : 1;\r\n\r\n        let sourceMinDamage = sourceDamageMultiplier * (1 + baseDamageFlat);\r\n        let sourceMaxDamage = sourceDamageMultiplier * (baseDamageRatio * sourceAutoAttackMaxDamage + baseDamageFlat);\r\n\r\n        if (Math.random() < critChance) {\r\n            sourceMinDamage = sourceMaxDamage;\r\n        }\r\n\r\n        let damageRoll = CombatUtilities.randomInt(sourceMinDamage, sourceMaxDamage);\r\n        let maxPremitigatedDamage = Math.min(damageRoll, target.combatDetails.currentHitpoints);\r\n\r\n        let damageDone = 0;\r\n        let mitigatedReflectDamage = 0;\r\n        let reflectDamageDone = 0;\r\n\r\n        let didHit = false;\r\n        if (Math.random() < hitChance) {\r\n            didHit = true;\r\n\r\n            let targetDamageTakenRatio = 100 / (100 + targetResistance);\r\n            if (targetResistance < 0) {\r\n                targetDamageTakenRatio = (100 - targetResistance) / 100;\r\n            }\r\n\r\n            let mitigatedDamage = Math.ceil(targetDamageTakenRatio * damageRoll);\r\n            damageDone = Math.min(mitigatedDamage, target.combatDetails.currentHitpoints);\r\n            target.combatDetails.currentHitpoints -= damageDone;\r\n        }\r\n\r\n        if (targetReflectPower > 0 && targetResistance > 0) {\r\n            let sourceDamageTakenRatio = 100 / (100 + sourceResistance);\r\n            if (sourceResistance < 0) {\r\n                sourceDamageTakenRatio = (100 - sourceResistance) / 100;\r\n            }\r\n\r\n            let reflectDamage = Math.ceil(targetReflectPower * targetResistance);\r\n            mitigatedReflectDamage = Math.ceil(sourceDamageTakenRatio * reflectDamage);\r\n            reflectDamageDone = Math.min(mitigatedReflectDamage, source.combatDetails.currentHitpoints);\r\n            source.combatDetails.currentHitpoints -= reflectDamageDone;\r\n        }\r\n\r\n        let lifeStealHeal = 0;\r\n        if (!abilityEffect && didHit && source.combatDetails.combatStats.lifeSteal > 0) {\r\n            lifeStealHeal = source.addHitpoints(Math.floor(source.combatDetails.combatStats.lifeSteal * damageDone));\r\n        }\r\n\r\n        let experienceGained = {\r\n            source: {\r\n                attack: 0,\r\n                power: 0,\r\n                ranged: 0,\r\n                magic: 0,\r\n            },\r\n            target: {\r\n                defense: 0,\r\n                stamina: 0,\r\n            },\r\n        };\r\n\r\n        switch (combatStyle) {\r\n            case \"/combat_styles/stab\":\r\n                experienceGained.source.attack = this.calculateAttackExperience(damageDone, combatStyle);\r\n                break;\r\n            case \"/combat_styles/slash\":\r\n                experienceGained.source.attack = this.calculateAttackExperience(damageDone, combatStyle);\r\n                experienceGained.source.power = this.calculatePowerExperience(damageDone, combatStyle);\r\n                break;\r\n            case \"/combat_styles/smash\":\r\n                experienceGained.source.power = this.calculatePowerExperience(damageDone, combatStyle);\r\n                break;\r\n            case \"/combat_styles/ranged\":\r\n                experienceGained.source.ranged = this.calculateRangedExperience(damageDone);\r\n                break;\r\n            case \"/combat_styles/magic\":\r\n                experienceGained.source.magic = this.calculateMagicExperience(damageDone);\r\n                break;\r\n        }\r\n\r\n        let damagePrevented = maxPremitigatedDamage - damageDone;\r\n\r\n        experienceGained.target.defense = this.calculateDefenseExperience(damagePrevented);\r\n        experienceGained.target.stamina = this.calculateStaminaExperience(damagePrevented, damageDone);\r\n\r\n        if (mitigatedReflectDamage > 0) {\r\n            experienceGained.target.defense += this.calculateDefenseExperience(mitigatedReflectDamage);\r\n        }\r\n\r\n        return { damageDone, didHit, reflectDamageDone, lifeStealHeal, experienceGained };\r\n    }\r\n\r\n    static processHeal(source, abilityEffect) {\r\n        if (abilityEffect.combatStyleHrid != \"/combat_styles/magic\") {\r\n            throw new Error(\"Heal ability effect not supported for combat style: \" + abilityEffect.combatStyleHrid);\r\n        }\r\n\r\n        let healingAmplify = 1 + source.combatDetails.combatStats.healingAmplify;\r\n        let magicMaxDamage = source.combatDetails.magicMaxDamage;\r\n\r\n        let baseHealFlat = abilityEffect.damageFlat;\r\n        let baseHealRatio = abilityEffect.damageRatio;\r\n\r\n        let minHeal = healingAmplify * (1 + baseHealFlat);\r\n        let maxHeal = healingAmplify * (baseHealRatio * magicMaxDamage + baseHealFlat);\r\n\r\n        let heal = this.randomInt(minHeal, maxHeal);\r\n        let amountHealed = source.addHitpoints(heal);\r\n\r\n        return amountHealed;\r\n    }\r\n\r\n    static calculateTickValue(totalValue, totalTicks, currentTick) {\r\n        let currentSum = Math.floor((currentTick * totalValue) / totalTicks);\r\n        let previousSum = Math.floor(((currentTick - 1) * totalValue) / totalTicks);\r\n\r\n        return currentSum - previousSum;\r\n    }\r\n\r\n    static calculateStaminaExperience(damagePrevented, damageTaken) {\r\n        return 0.03 * damagePrevented + 0.3 * damageTaken;\r\n    }\r\n\r\n    static calculateIntelligenceExperience(manaUsed) {\r\n        return 0.3 * manaUsed;\r\n    }\r\n\r\n    static calculateAttackExperience(damage, combatStyle) {\r\n        switch (combatStyle) {\r\n            case \"/combat_styles/stab\":\r\n                return 0.6 + 0.15 * damage;\r\n            case \"/combat_styles/slash\":\r\n                return 0.3 + 0.075 * damage;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    static calculatePowerExperience(damage, combatStyle) {\r\n        switch (combatStyle) {\r\n            case \"/combat_styles/smash\":\r\n                return 0.6 + 0.15 * damage;\r\n            case \"/combat_styles/slash\":\r\n                return 0.3 + 0.075 * damage;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    static calculateDefenseExperience(damagePrevented) {\r\n        return 0.4 + 0.1 * damagePrevented;\r\n    }\r\n\r\n    static calculateRangedExperience(damage) {\r\n        return 0.4 + 0.1 * damage;\r\n    }\r\n\r\n    static calculateMagicExperience(damage) {\r\n        return 0.4 + 0.1 * damage;\r\n    }\r\n}\r\n\r\nexport default CombatUtilities;\r\n","import Buff from \"./buff\";\r\nimport itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Consumable {\r\n    constructor(hrid, triggers = null) {\r\n        this.hrid = hrid;\r\n\r\n        let gameConsumable = itemDetailMap[this.hrid];\r\n        if (!gameConsumable) {\r\n            throw new Error(\"No consumable found for hrid: \" + this.hrid);\r\n        }\r\n\r\n        this.cooldownDuration = gameConsumable.consumableDetail.cooldownDuration;\r\n        this.hitpointRestore = gameConsumable.consumableDetail.hitpointRestore;\r\n        this.manapointRestore = gameConsumable.consumableDetail.manapointRestore;\r\n        this.recoveryDuration = gameConsumable.consumableDetail.recoveryDuration;\r\n\r\n        this.buffs = [];\r\n        if (gameConsumable.consumableDetail.buffs) {\r\n            for (const consumableBuff of gameConsumable.consumableDetail.buffs) {\r\n                let buff = new Buff(consumableBuff);\r\n                this.buffs.push(buff);\r\n            }\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameConsumable.consumableDetail.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let triggers = dto.triggers.map((trigger) => Trigger.createFromDTO(trigger));\r\n        let consumable = new Consumable(dto.hrid, triggers);\r\n\r\n        return consumable;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (source.isStunned) {\r\n            return false;\r\n        }\r\n\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies, currentTime)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Consumable;\r\n","import itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport enhancementLevelTotalMultiplierTable from \"./data/enhancementLevelTotalMultiplierTable.json\";\r\n\r\nclass Equipment {\r\n    constructor(hrid, enhancementLevel) {\r\n        this.hrid = hrid;\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        if (!gameItem) {\r\n            throw new Error(\"No equipment found for hrid: \" + this.hrid);\r\n        }\r\n        this.gameItem = gameItem;\r\n        this.enhancementLevel = enhancementLevel;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let equipment = new Equipment(dto.hrid, dto.enhancementLevel);\r\n\r\n        return equipment;\r\n    }\r\n\r\n    getCombatStat(combatStat) {\r\n        let multiplier = enhancementLevelTotalMultiplierTable[this.enhancementLevel];\r\n\r\n        let stat =\r\n            this.gameItem.equipmentDetail.combatStats[combatStat] +\r\n            multiplier * this.gameItem.equipmentDetail.combatEnhancementBonuses[combatStat];\r\n\r\n        return stat;\r\n    }\r\n\r\n    getCombatStyle() {\r\n        return this.gameItem.equipmentDetail.combatStats.combatStyleHrids[0];\r\n    }\r\n\r\n    getDamageType() {\r\n        return this.gameItem.equipmentDetail.combatStats.damageType;\r\n    }\r\n}\r\n\r\nexport default Equipment;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass AutoAttackEvent extends CombatEvent {\r\n    static type = \"autoAttack\";\r\n\r\n    constructor(time, source) {\r\n        super(AutoAttackEvent.type, time);\r\n\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport default AutoAttackEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass BleedTickEvent extends CombatEvent {\r\n    static type = \"bleedTick\";\r\n\r\n    constructor(time, sourceRef, target, damage, totalTicks, currentTick) {\r\n        super(BleedTickEvent.type, time);\r\n\r\n        // Calling it 'source' would wrongly clear bleeds when the source dies\r\n        this.sourceRef = sourceRef;\r\n        this.target = target;\r\n        this.damage = damage;\r\n        this.totalTicks = totalTicks;\r\n        this.currentTick = currentTick;\r\n    }\r\n}\r\n\r\nexport default BleedTickEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass CheckBuffExpirationEvent extends CombatEvent {\r\n    static type = \"checkBuffExpiration\";\r\n\r\n    constructor(time, source) {\r\n        super(CheckBuffExpirationEvent.type, time);\r\n\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport default CheckBuffExpirationEvent;\r\n","class CombatEvent {\r\n    constructor(type, time) {\r\n        this.type = type;\r\n        this.time = time;\r\n    }\r\n}\r\n\r\nexport default CombatEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass CombatStartEvent extends CombatEvent {\r\n    static type = \"combatStart\";\r\n\r\n    constructor(time) {\r\n        super(CombatStartEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default CombatStartEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass ConsumableTickEvent extends CombatEvent {\r\n    static type = \"consumableTick\";\r\n\r\n    constructor(time, source, consumable, totalTicks, currentTick) {\r\n        super(ConsumableTickEvent.type, time);\r\n\r\n        this.source = source;\r\n        this.consumable = consumable;\r\n        this.totalTicks = totalTicks;\r\n        this.currentTick = currentTick;\r\n    }\r\n}\r\n\r\nexport default ConsumableTickEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass CooldownReadyEvent extends CombatEvent {\r\n    static type = \"cooldownReady\";\r\n\r\n    constructor(time) {\r\n        super(CooldownReadyEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default CooldownReadyEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass EnemyRespawnEvent extends CombatEvent {\r\n    static type = \"enemyRespawn\";\r\n\r\n    constructor(time) {\r\n        super(EnemyRespawnEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default EnemyRespawnEvent;\r\n","import Heap from \"heap-js\";\r\n\r\nclass EventQueue {\r\n    constructor() {\r\n        this.minHeap = new Heap((a, b) => a.time - b.time);\r\n    }\r\n\r\n    addEvent(event) {\r\n        this.minHeap.push(event);\r\n    }\r\n\r\n    getNextEvent() {\r\n        return this.minHeap.pop();\r\n    }\r\n\r\n    containsEventOfType(type) {\r\n        let heapEvents = this.minHeap.toArray();\r\n\r\n        return heapEvents.some((event) => event.type == type);\r\n    }\r\n\r\n    clear() {\r\n        this.minHeap = new Heap((a, b) => a.time - b.time);\r\n    }\r\n\r\n    clearEventsForUnit(unit) {\r\n        this.clearMatching((event) => event.source == unit || event.target == unit);\r\n    }\r\n\r\n    clearEventsOfType(type) {\r\n        this.clearMatching((event) => event.type == type);\r\n    }\r\n\r\n    clearMatching(fn) {\r\n        let heapEvents = this.minHeap.toArray();\r\n\r\n        for (const event of heapEvents) {\r\n            if (fn(event)) {\r\n                this.minHeap.remove(event);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventQueue;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass PlayerRespawnEvent extends CombatEvent {\r\n    static type = \"playerRespawn\";\r\n\r\n    constructor(time) {\r\n        super(PlayerRespawnEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default PlayerRespawnEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass RegenTickEvent extends CombatEvent {\r\n    static type = \"regenTick\";\r\n\r\n    constructor(time) {\r\n        super(RegenTickEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default RegenTickEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass StunExpirationEvent extends CombatEvent {\r\n    static type = \"stunExpiration\";\r\n\r\n    constructor(time, source) {\r\n        super(StunExpirationEvent.type, time);\r\n\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport default StunExpirationEvent;","import Ability from \"./ability\";\r\nimport CombatUnit from \"./combatUnit\";\r\nimport combatMonsterDetailMap from \"./data/combatMonsterDetailMap.json\";\r\n\r\nclass Monster extends CombatUnit {\r\n    constructor(hrid) {\r\n        super();\r\n\r\n        this.isPlayer = false;\r\n        this.hrid = hrid;\r\n\r\n        let gameMonster = combatMonsterDetailMap[this.hrid];\r\n        if (!gameMonster) {\r\n            throw new Error(\"No monster found for hrid: \" + this.hrid);\r\n        }\r\n\r\n        for (let i = 0; i < gameMonster.abilities.length; i++) {\r\n            this.abilities[i] = new Ability(gameMonster.abilities[i].abilityHrid, gameMonster.abilities[i].level);\r\n        }\r\n    }\r\n\r\n    updateCombatDetails() {\r\n        let gameMonster = combatMonsterDetailMap[this.hrid];\r\n\r\n        this.staminaLevel = gameMonster.combatDetails.staminaLevel;\r\n        this.intelligenceLevel = gameMonster.combatDetails.intelligenceLevel;\r\n        this.attackLevel = gameMonster.combatDetails.attackLevel;\r\n        this.powerLevel = gameMonster.combatDetails.powerLevel;\r\n        this.defenseLevel = gameMonster.combatDetails.defenseLevel;\r\n        this.rangedLevel = gameMonster.combatDetails.rangedLevel;\r\n        this.magicLevel = gameMonster.combatDetails.magicLevel;\r\n\r\n        this.combatDetails.combatStats.combatStyleHrid = gameMonster.combatDetails.combatStats.combatStyleHrids[0];\r\n\r\n        for (const [key, value] of Object.entries(gameMonster.combatDetails.combatStats)) {\r\n            this.combatDetails.combatStats[key] = value;\r\n        }\r\n\r\n        super.updateCombatDetails();\r\n    }\r\n}\r\n\r\nexport default Monster;\r\n","import Ability from \"./ability\";\r\nimport CombatUnit from \"./combatUnit\";\r\nimport Consumable from \"./consumable\";\r\nimport Equipment from \"./equipment\";\r\n\r\nclass Player extends CombatUnit {\r\n    equipment = {\r\n        \"/equipment_types/head\": null,\r\n        \"/equipment_types/body\": null,\r\n        \"/equipment_types/legs\": null,\r\n        \"/equipment_types/feet\": null,\r\n        \"/equipment_types/hands\": null,\r\n        \"/equipment_types/main_hand\": null,\r\n        \"/equipment_types/two_hand\": null,\r\n        \"/equipment_types/off_hand\": null,\r\n        \"/equipment_types/pouch\": null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.isPlayer = true;\r\n        this.hrid = \"player\";\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let player = new Player();\r\n\r\n        player.staminaLevel = dto.staminaLevel;\r\n        player.intelligenceLevel = dto.intelligenceLevel;\r\n        player.attackLevel = dto.attackLevel;\r\n        player.powerLevel = dto.powerLevel;\r\n        player.defenseLevel = dto.defenseLevel;\r\n        player.rangedLevel = dto.rangedLevel;\r\n        player.magicLevel = dto.magicLevel;\r\n\r\n        for (const [key, value] of Object.entries(dto.equipment)) {\r\n            player.equipment[key] = value ? Equipment.createFromDTO(value) : null;\r\n        }\r\n\r\n        player.food = dto.food.map((food) => (food ? Consumable.createFromDTO(food) : null));\r\n        player.drinks = dto.drinks.map((drink) => (drink ? Consumable.createFromDTO(drink) : null));\r\n        player.abilities = dto.abilities.map((ability) => (ability ? Ability.createFromDTO(ability) : null));\r\n\r\n        return player;\r\n    }\r\n\r\n    updateCombatDetails() {\r\n        if (this.equipment[\"/equipment_types/main_hand\"]) {\r\n            this.combatDetails.combatStats.combatStyleHrid =\r\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStyle();\r\n            this.combatDetails.combatStats.damageType = this.equipment[\"/equipment_types/main_hand\"].getDamageType();\r\n            this.combatDetails.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStat(\"attackInterval\");\r\n        } else if (this.equipment[\"/equipment_types/two_hand\"]) {\r\n            this.combatDetails.combatStats.combatStyleHrid =\r\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStyle();\r\n            this.combatDetails.combatStats.damageType = this.equipment[\"/equipment_types/two_hand\"].getDamageType();\r\n            this.combatDetails.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStat(\"attackInterval\");\r\n        } else {\r\n            this.combatDetails.combatStats.combatStyleHrid = \"/combat_styles/smash\";\r\n            this.combatDetails.combatStats.damageType = \"/damage_types/physical\";\r\n            this.combatDetails.combatStats.attackInterval = 3000000000;\r\n        }\r\n\r\n        [\r\n            \"stabAccuracy\",\r\n            \"slashAccuracy\",\r\n            \"smashAccuracy\",\r\n            \"rangedAccuracy\",\r\n            \"stabDamage\",\r\n            \"slashDamage\",\r\n            \"smashDamage\",\r\n            \"rangedDamage\",\r\n            \"magicDamage\",\r\n            \"physicalAmplify\",\r\n            \"waterAmplify\",\r\n            \"natureAmplify\",\r\n            \"fireAmplify\",\r\n            \"healingAmplify\",\r\n            \"stabEvasion\",\r\n            \"slashEvasion\",\r\n            \"smashEvasion\",\r\n            \"rangedEvasion\",\r\n            \"armor\",\r\n            \"waterResistance\",\r\n            \"natureResistance\",\r\n            \"fireResistance\",\r\n            \"maxHitpoints\",\r\n            \"maxManapoints\",\r\n            \"lifeSteal\",\r\n            \"physicalReflectPower\",\r\n            \"dropRate\",\r\n            \"dropQuantity\",\r\n            \"experienceRate\",\r\n        ].forEach((stat) => {\r\n            this.combatDetails.combatStats[stat] = Object.values(this.equipment)\r\n                .filter((equipment) => equipment != null)\r\n                .map((equipment) => equipment.getCombatStat(stat))\r\n                .reduce((prev, cur) => prev + cur, 0);\r\n        });\r\n\r\n        if (this.equipment[\"/equipment_types/pouch\"]) {\r\n            this.combatDetails.combatStats.foodSlots =\r\n                1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"foodSlots\");\r\n            this.combatDetails.combatStats.drinkSlots =\r\n                1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"drinkSlots\");\r\n        } else {\r\n            this.combatDetails.combatStats.foodSlots = 1;\r\n            this.combatDetails.combatStats.drinkSlots = 1;\r\n        }\r\n\r\n        super.updateCombatDetails();\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","class SimResult {\r\n    constructor() {\r\n        this.deaths = {};\r\n        this.experienceGained = {};\r\n        this.encounters = 0;\r\n        this.attacks = {};\r\n        this.consumablesUsed = {};\r\n        this.hitpointsGained = {};\r\n        this.manapointsGained = {};\r\n        this.playerRanOutOfMana = false;\r\n    }\r\n\r\n    addDeath(unit) {\r\n        if (!this.deaths[unit.hrid]) {\r\n            this.deaths[unit.hrid] = 0;\r\n        }\r\n\r\n        this.deaths[unit.hrid] += 1;\r\n    }\r\n\r\n    addExperienceGain(unit, type, experience) {\r\n        if (!unit.isPlayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this.experienceGained[unit.hrid]) {\r\n            this.experienceGained[unit.hrid] = {\r\n                stamina: 0,\r\n                intelligence: 0,\r\n                attack: 0,\r\n                power: 0,\r\n                defense: 0,\r\n                ranged: 0,\r\n                magic: 0,\r\n            };\r\n        }\r\n\r\n        this.experienceGained[unit.hrid][type] += experience * (1 + unit.combatDetails.combatStats.experienceRate);\r\n    }\r\n\r\n    addEncounterEnd() {\r\n        this.encounters++;\r\n    }\r\n\r\n    addAttack(source, target, ability, hit) {\r\n        if (!this.attacks[source.hrid]) {\r\n            this.attacks[source.hrid] = {};\r\n        }\r\n        if (!this.attacks[source.hrid][target.hrid]) {\r\n            this.attacks[source.hrid][target.hrid] = {};\r\n        }\r\n        if (!this.attacks[source.hrid][target.hrid][ability]) {\r\n            this.attacks[source.hrid][target.hrid][ability] = {};\r\n        }\r\n\r\n        if (!this.attacks[source.hrid][target.hrid][ability][hit]) {\r\n            this.attacks[source.hrid][target.hrid][ability][hit] = 0;\r\n        }\r\n\r\n        this.attacks[source.hrid][target.hrid][ability][hit] += 1;\r\n    }\r\n\r\n    addConsumableUse(unit, consumable) {\r\n        if (!this.consumablesUsed[unit.hrid]) {\r\n            this.consumablesUsed[unit.hrid] = {};\r\n        }\r\n        if (!this.consumablesUsed[unit.hrid][consumable.hrid]) {\r\n            this.consumablesUsed[unit.hrid][consumable.hrid] = 0;\r\n        }\r\n\r\n        this.consumablesUsed[unit.hrid][consumable.hrid] += 1;\r\n    }\r\n\r\n    addHitpointsGained(unit, source, amount) {\r\n        if (!this.hitpointsGained[unit.hrid]) {\r\n            this.hitpointsGained[unit.hrid] = {};\r\n        }\r\n        if (!this.hitpointsGained[unit.hrid][source]) {\r\n            this.hitpointsGained[unit.hrid][source] = 0;\r\n        }\r\n\r\n        this.hitpointsGained[unit.hrid][source] += amount;\r\n    }\r\n\r\n    addManapointsGained(unit, source, amount) {\r\n        if (!this.manapointsGained[unit.hrid]) {\r\n            this.manapointsGained[unit.hrid] = {};\r\n        }\r\n        if (!this.manapointsGained[unit.hrid][source]) {\r\n            this.manapointsGained[unit.hrid][source] = 0;\r\n        }\r\n\r\n        this.manapointsGained[unit.hrid][source] += amount;\r\n    }\r\n}\r\n\r\nexport default SimResult;\r\n","import combatTriggerDependencyDetailMap from \"./data/combatTriggerDependencyDetailMap.json\";\r\n\r\nclass Trigger {\r\n    constructor(dependencyHrid, conditionHrid, comparatorHrid, value = 0) {\r\n        this.dependencyHrid = dependencyHrid;\r\n        this.conditionHrid = conditionHrid;\r\n        this.comparatorHrid = comparatorHrid;\r\n        this.value = value;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let trigger = new Trigger(dto.dependencyHrid, dto.conditionHrid, dto.comparatorHrid, dto.value);\r\n\r\n        return trigger;\r\n    }\r\n\r\n    isActive(source, target, friendlies, enemies, currentTime) {\r\n        if (combatTriggerDependencyDetailMap[this.dependencyHrid].isSingleTarget) {\r\n            return this.isActiveSingleTarget(source, target, currentTime);\r\n        } else {\r\n            return this.isActiveMultiTarget(friendlies, enemies, currentTime);\r\n        }\r\n    }\r\n\r\n    isActiveSingleTarget(source, target, currentTime) {\r\n        let dependencyValue;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/self\":\r\n                dependencyValue = this.getDependencyValue(source, currentTime);\r\n                break;\r\n            case \"/combat_trigger_dependencies/targeted_enemy\":\r\n                if (!target) {\r\n                    return false;\r\n                }\r\n                dependencyValue = this.getDependencyValue(target, currentTime);\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown dependencyHrid in trigger: \" + this.dependencyHrid);\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    isActiveMultiTarget(friendlies, enemies, currentTime) {\r\n        let dependency;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/all_allies\":\r\n                dependency = friendlies;\r\n                break;\r\n            case \"/combat_trigger_dependencies/all_enemies\":\r\n                if (!enemies) {\r\n                    return false;\r\n                }\r\n                dependency = enemies;\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown dependencyHrid in trigger: \" + this.dependencyHrid);\r\n        }\r\n\r\n        let dependencyValue;\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/number_of_active_units\":\r\n                dependencyValue = dependency.filter((unit) => unit.combatDetails.currentHitpoints > 0).length;\r\n                break;\r\n            default:\r\n                dependencyValue = dependency\r\n                    .map((unit) => this.getDependencyValue(unit, currentTime))\r\n                    .reduce((prev, cur) => prev + cur, 0);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    getDependencyValue(source, currentTime) {\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/attack_coffee\":\r\n            case \"/combat_trigger_conditions/berserk\":\r\n            case \"/combat_trigger_conditions/defense_coffee\":\r\n            case \"/combat_trigger_conditions/elemental_affinity_fire_amplify\":\r\n            case \"/combat_trigger_conditions/elemental_affinity_nature_amplify\":\r\n            case \"/combat_trigger_conditions/elemental_affinity_water_amplify\":\r\n            case \"/combat_trigger_conditions/frenzy\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee_max_mp\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee_mp_regen\":\r\n            case \"/combat_trigger_conditions/lucky_coffee\":\r\n            case \"/combat_trigger_conditions/magic_coffee\":\r\n            case \"/combat_trigger_conditions/power_coffee\":\r\n            case \"/combat_trigger_conditions/precision\":\r\n            case \"/combat_trigger_conditions/ranged_coffee\":\r\n            case \"/combat_trigger_conditions/spike_shell\":\r\n            case \"/combat_trigger_conditions/stamina_coffee_hp_regen\":\r\n            case \"/combat_trigger_conditions/stamina_coffee_max_hp\":\r\n            case \"/combat_trigger_conditions/swiftness_coffee\":\r\n            case \"/combat_trigger_conditions/toughness_armor\":\r\n            case \"/combat_trigger_conditions/toughness_fire_resistance\":\r\n            case \"/combat_trigger_conditions/toughness_nature_resistance\":\r\n            case \"/combat_trigger_conditions/toughness_water_resistance\":\r\n            case \"/combat_trigger_conditions/vampirism\":\r\n            case \"/combat_trigger_conditions/wisdom_coffee\":\r\n                let buffHrid = \"/buff_sources\";\r\n                buffHrid += this.conditionHrid.slice(this.conditionHrid.lastIndexOf(\"/\"));\r\n                return source.combatBuffs[buffHrid];\r\n            case \"/combat_trigger_conditions/current_hp\":\r\n                return source.combatDetails.currentHitpoints;\r\n            case \"/combat_trigger_conditions/current_mp\":\r\n                return source.combatDetails.currentManapoints;\r\n            case \"/combat_trigger_conditions/missing_hp\":\r\n                return source.combatDetails.maxHitpoints - source.combatDetails.currentHitpoints;\r\n            case \"/combat_trigger_conditions/missing_mp\":\r\n                return source.combatDetails.maxManapoints - source.combatDetails.currentManapoints;\r\n            case \"/combat_trigger_conditions/stun_status\":\r\n                // Replicate the game's behaviour of \"stun status active\" triggers activating\r\n                // immediately after the stun has worn off\r\n                return source.isStunned || source.stunExpireTime == currentTime;\r\n            default:\r\n                throw new Error(\"Unknown conditionHrid in trigger: \" + this.conditionHrid);\r\n        }\r\n    }\r\n\r\n    compareValue(dependencyValue) {\r\n        switch (this.comparatorHrid) {\r\n            case \"/combat_trigger_comparators/greater_than_equal\":\r\n                return dependencyValue >= this.value;\r\n            case \"/combat_trigger_comparators/less_than_equal\":\r\n                return dependencyValue <= this.value;\r\n            case \"/combat_trigger_comparators/is_active\":\r\n                return !!dependencyValue;\r\n            case \"/combat_trigger_comparators/is_inactive\":\r\n                return !dependencyValue;\r\n            default:\r\n                throw new Error(\"Unknown comparatorHrid in trigger: \" + this.comparatorHrid);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trigger;\r\n","import actionDetailMap from \"./data/actionDetailMap.json\";\r\nimport Monster from \"./monster\";\r\n\r\nclass Zone {\r\n    constructor(hrid) {\r\n        this.hrid = hrid;\r\n\r\n        let gameZone = actionDetailMap[this.hrid];\r\n        this.monsterSpawnInfo = gameZone.monsterSpawnInfo;\r\n    }\r\n\r\n    getRandomEncounter() {\r\n        let totalWeight = this.monsterSpawnInfo.spawns.reduce((prev, cur) => prev + cur.rate, 0);\r\n\r\n        let encounterHrids = [];\r\n        let totalStrength = 0;\r\n\r\n        outer: for (let i = 0; i < this.monsterSpawnInfo.maxSpawnCount; i++) {\r\n            let randomWeight = totalWeight * Math.random();\r\n            let cumulativeWeight = 0;\r\n\r\n            for (const spawn of this.monsterSpawnInfo.spawns) {\r\n                cumulativeWeight += spawn.rate;\r\n                if (randomWeight <= cumulativeWeight) {\r\n                    totalStrength += spawn.strength;\r\n\r\n                    if (totalStrength <= this.monsterSpawnInfo.maxTotalStrength) {\r\n                        encounterHrids.push(spawn.combatMonsterHrid);\r\n                    } else {\r\n                        break outer;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return encounterHrids.map((hrid) => new Monster(hrid));\r\n    }\r\n}\r\n\r\nexport default Zone;\r\n","import CombatSimulator from \"./combatsimulator/combatSimulator\";\r\nimport Player from \"./combatsimulator/player\";\r\nimport Zone from \"./combatsimulator/zone\";\r\n\r\nonmessage = async function (event) {\r\n    switch (event.data.type) {\r\n        case \"start_simulation\":\r\n            let player = Player.createFromDTO(event.data.player);\r\n            let zone = new Zone(event.data.zoneHrid);\r\n            let simulationTimeLimit = event.data.simulationTimeLimit;\r\n\r\n            let combatSimulator = new CombatSimulator(player, zone);\r\n            combatSimulator.addEventListener(\"progress\", (event) => {\r\n                this.postMessage({ type: \"simulation_progress\", progress: event.detail });\r\n            });\r\n\r\n            try {\r\n                let simResult = await combatSimulator.simulate(simulationTimeLimit);\r\n                this.postMessage({ type: \"simulation_result\", simResult: simResult });\r\n            } catch (e) {\r\n                this.postMessage({ type: \"simulation_error\", error: e });\r\n            }\r\n            break;\r\n    }\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_heap-js_dist_heap-js_es5_js\"], () => (__webpack_require__(\"./src/worker.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_worker_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkmwicombatsimulator\"] = self[\"webpackChunkmwicombatsimulator\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_heap-js_dist_heap-js_es5_js\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}